name: Release

on:
  push:
    tags: [ 'v*' ]

jobs:
  release-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          profile: minimal
          default: true
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
      - name: Build
        uses: messense/maturin-action@v1
        with:
          args: --no-sdist --release --out dist --strip --universal2 -m crates/cargo-lambda-cli/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v3
        with:
          name: apple-darwin-bin
          path: target/release/cargo-lambda
          if-no-files-found: error
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        run: |
          cd target/release
          tar czvf cargo-lambda-${{ steps.tag.outputs.tag }}.apple-darwin.tar.gz cargo-lambda
          shasum -a 256 cargo-lambda-${{ steps.tag.outputs.tag }}.apple-darwin.tar.gz > cargo-lambda-${{ steps.tag.outputs.tag }}.apple-darwin.tar.gz.sha256
          cd -
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/cargo-lambda*.tar.gz
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}

  release-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          - arch: x64
            target: x86_64-pc-windows-msvc
          - arch: x86
            target: i686-pc-windows-msvc
          - arch: arm64
            target: aarch64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
      - if: ${{ matrix.platform.target == 'aarch64-pc-windows-msvc' }}
        run: |
          echo "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin" >> $GITHUB_PATH
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
        shell: bash
      - name: Build
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --no-sdist --strip -m crates/cargo-lambda-cli/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-${{ matrix.platform.arch }}-bin
          path: target/${{ matrix.platform.target }}/release/cargo-lambda.exe
          if-no-files-found: error
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        run: |
          cd target/${{ matrix.platform.target }}/release
          7z a cargo-lambda.zip cargo-lambda.exe
          cd -
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: cargo-lambda-${{ steps.tag.outputs.tag }}.windows-${{ matrix.platform.arch }}.zip
          file: target/${{ matrix.platform.target }}/release/cargo-lambda.zip
          overwrite: true
          tag: ${{ github.ref }}

  release-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl", image_tag: "x86_64-musl" },
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl" },
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl" },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf" },
          { target: "armv7-unknown-linux-musleabi", image_tag: "armv7-musleabi" },
        ]
    container:
      image: messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        CFLAGS_armv7_unknown_linux_musleabihf: '-mfpu=vfpv3-d16'
    steps:
      - uses: actions/checkout@v3
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.platform.target }}
      - name: Build
        uses: messense/maturin-action@main
        with:
          target: ${{ matrix.platform.target }}
          manylinux: auto
          container: off
          args: --no-sdist --release -o dist --strip -m crates/cargo-lambda-cli/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform.target }}-bin
          path: target/${{ matrix.platform.target }}/release/cargo-lambda
          if-no-files-found: error
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czvf cargo-lambda-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz cargo-lambda
          shasum -a 256 cargo-lambda-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz > cargo-lambda-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz.sha256
          cd -
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.platform.target }}/release/cargo-lambda*.tar.gz*
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}

  release-pypi:
    name: Release PyPI package
    runs-on: ubuntu-latest
    needs: [ release-macos, release-windows, release-linux ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_ACCESS_TOKEN }}
        uses: messense/maturin-action@v1
        with:
          command: upload
          args: --skip-existing *
